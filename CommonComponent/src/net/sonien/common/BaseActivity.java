package net.sonien.common;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.ViewTreeObserver;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.Toast;/** * 백 버튼 시 포커스 제거 및 종료 확인 기능이 추가된 BaseActivity *  * isMainActivity() 재정의 * get_wait_for_finish() 재정의 * 최상위 레이아웃에 android:focusable="true", android:focusableInTouchMode="true" 설정 *  * 하여 사용합니다. * @author nethe * */public class BaseActivity extends Activity implements ViewTreeObserver.OnGlobalFocusChangeListener {		private static class ThreadWaitForFinish implements Runnable {		private static int 					WAIT_FOR_FINISH = 2000;		private static Thread 				FINISH_THREAD; 				public static boolean show(Context context) {						if(FINISH_THREAD != null) 				return false;			FINISH_THREAD = new Thread(new ThreadWaitForFinish(context));			FINISH_THREAD.start();			return true;		}				public static void finish() {			if(FINISH_THREAD != null) {				FINISH_THREAD.interrupt();			}						FINISH_THREAD = null;		}			final Toast		mPopup;		final Context 	mContext;		ThreadWaitForFinish(Context context) {			super();			mContext 	= context;			mPopup 		= Toast.makeText(mContext, get_wait_for_finish(), Toast.LENGTH_LONG);			mPopup.show();		}				@Override		public void run() {			try {				Thread.sleep(WAIT_FOR_FINISH);			} catch (InterruptedException e) {			} finally {				mPopup.cancel();				FINISH_THREAD = null;			}		}	}		/**	 * 종료 대기 문장을 반환한다. 원하는 메시지를 재정의 하여 사용한다.	 * @return	 */	public static String get_wait_for_finish() {		return "Press back again to finish app.";	}		private View 	mLastFocusedEditText;	private Toast 	mCurrentToast;		public BaseActivity() {		super();	}	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				ViewTreeObserver observer = getWindow().getDecorView().getViewTreeObserver();		observer.addOnGlobalFocusChangeListener(this);	}		@Override	protected void onPause() {		ThreadWaitForFinish.finish();		super.onPause();	}		@Override	public void onBackPressed() {		View currentFocusedView = getCurrentFocus();		if(currentFocusedView != null && currentFocusedView instanceof EditText) {			clearFocus();		}		else {			if(!isMainActivity() || !ThreadWaitForFinish.show(getApplicationContext())) {				super.onBackPressed();			}		}	}		@Override	public void onGlobalFocusChanged(View oldFocus, View newFocus) {		Log.i("BaseActivity", "Focus : " + (oldFocus == null?"null":oldFocus.getClass().getName()) + " -> " + (newFocus == null?"null":newFocus.getClass().getName()));				View newFocusedEditText = null;		if(newFocus instanceof EditText) {			newFocusedEditText = newFocus;		}				if(mLastFocusedEditText != null && newFocusedEditText == null) {			InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);            imm.hideSoftInputFromWindow(mLastFocusedEditText.getWindowToken(), 0);		}				mLastFocusedEditText = newFocusedEditText;	}		/**	 * 최 상위  Dummy Focus 로 포커스를 옮겨, 사실상 포커스를 제거한다.	 */	public void clearFocus() {		View decorView = getWindow().getDecorView();		decorView.requestFocus();				Log.i("BaseActivity", "clearFocus()");	}		/**	 * 현재 액티비티가 메인 액티비티인지를 반환한다. 메인 액티비티에서는 반드시 이 코드를 Override 하여 return true 라도록 해야한다.	 * @return	 */	public boolean isMainActivity() {		return false;	}		/**	 * Toast 를 출력 한다. 기존 출력 중인 Toast 는 강제로 취소 된다.	 * @param text	 * @param duration	 */	public void showToast(String text, int duration) {		if(mCurrentToast != null) {			mCurrentToast.cancel();		}				mCurrentToast = Toast.makeText(this, text, duration);		mCurrentToast.show();	}}